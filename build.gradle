buildscript {
    repositories {
        maven {
            url = 'https://files.minecraftforge.net/maven'
        }
        maven { url = 'https://plugins.gradle.org/m2' }
        maven {
            url = "https://www.cursemaven.com"
        }
        maven {
            // Licenser
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.4'
    }
}

apply plugin: 'net.minecraftforge.gradle.forge'

apply plugin: 'com.github.johnrengelman.shadow'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'maven-publish'

//Constants
String mcver = "1.12.2"
String forgever = "14.23.5.2847"
String archivesBaseName = 'ebmvccompat'
String projectver = '1.0.0'
String organization = 'vicious'
String gitlink = "github.com/Vicious-MCModding/EBMViveCraftCompat"
String gpruser = project.findProperty("gpr.user") ?: System.getenv("GPR_USER")
String gprpass = project.findProperty("gpr.key") ?: System.getenv("GPR_API_KEY")

version = "${mcver}-${projectver}"
group = "com.${organization}.${archivesBaseName}" // http://maven.apache.org/guides/mini/guide-naming-conventions.html


sourceCompatibility = targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

minecraft {
    version = "${mcver}-${forgever}"
    runDir = "run"
    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = "snapshot_20171003"
    //1.12_snapshot_20171003
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
}

repositories {

}

dependencies {
    compileOnly (fileTree(dir: 'lib', include: ['*.jar']))
}
// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": "${archivesBaseName}",
            "Specification-Vendor": "${organization}",
            "Specification-Version": "${projectver}", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"${organization}",
            'ForceLoadAsMod': true,
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}
processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }

    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}


// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')
reobf {
    shadowJar {
        mappingType = 'SEARGE'
        classpath = sourceSets.main.compileClasspath
    }
}

publishing {
    repositories {
        maven {
            name = "EMBVivecraftCompat"
            url = uri("https://maven.pkg.${gitlink}")
            credentials {
                username = gpruser
                password = gprpass
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            groupId = "com.${organization}"
            artifactId = "${archivesBaseName}"
            version = "${projectver}"
            from components.java
        }
    }
}

